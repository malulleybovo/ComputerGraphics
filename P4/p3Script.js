var canvas = document.getElementById('myCanvas');
var ctx = canvas.getContext('2d');
var m4 = twgl.m4;
var v3 = twgl.v3;
var Mmcpv = [];
Mmcpv.push(m4.identity());
var Mcp;

var showAxes = false; // display status for the visualization of coord axes
var isMenuOpen = false; // display status for the menu
var isOrtho = true; // determines which projection type is being applied
var isLookingAtDrone = true; // determines what is the camera target

var theta = 45; // angle on XY-plane from X- to Y-axis
var phi = 60; // angle down from Z-axis
var fov = 10; // field of view angle perspective projection
var zoom = 1.5; // zoom percentage for orthographic projection
var tilt = 0; // tilt angle for the camera

var drone1Rot = 0; // automated drone 1 motion
var drone2Rot = 0; // automated drone 2 motion
var drone3Rot = 0; // automated drone 3 motion
var propelRot = 0; // rotation of propellers

var myDronePos = [-500, 0, 150]; // player's drone position
var myDroneRot = 0; // XY camera rotation in drone mode
var myDroneSpeed = 20; // player's drone speed

var eye = [500, 500, 100]; // base eye position (not static)
var target = [0, 0, 0]; // base target position (not static)
var up = [0, 0, 1]; // base up position (not static)

var n = 1; // near plane
var f = 200; // far plane
var t = -200; // top plane
var b = 200; // bottom plane
var l = -200; // left plane
var r = 200; // right plane

var camStaticPos = [2000, 2000, 1000]; // position multiplier for camera

var crystalVertices = "v 7.343168 13.410324 -10.690054v 7.314769 13.749844 -10.771759v 7.462669 13.818092 -10.530161v 7.483969 13.473093 -10.462263v 0.144661 1.520570 -2.418663v 0.003861 1.457802 -2.646454v 3.604661 1.243668 -1.389967v 0.900657 -0.087100 -6.078809v 1.131657 -0.179629 -6.196044v 4.732458 -0.393764 -4.939656v 3.835661 1.151138 -1.507302v 4.591658 -0.456532 -5.167448v -4.963836 0.584490 4.709584v -4.839637 1.068732 2.072887v -4.733737 1.070437 2.205889v -7.621138 0.463498 1.822706v -7.493638 0.510847 1.720675v -7.745336 -0.020743 4.459404v -5.091335 0.537141 4.811615v -7.851236 -0.022449 4.326401v 2.893763 1.233919 1.046422v -0.931736 1.484291 1.755290v -0.833836 1.520965 1.635843v -0.353736 -0.190475 5.505553v -0.476936 -0.136852 5.421132v 3.471764 -0.440947 4.796785v 3.016963 1.180295 1.130944v 3.373864 -0.477522 4.916233v -5.913140 0.902454 -3.021660v -5.958640 0.813763 -3.302390v -1.708137 2.068371 -0.152661v -2.674244 -0.291183 -7.667106v -2.380544 -0.285912 -7.716299v 1.869859 0.968697 -4.566670v -1.414437 2.073543 -0.201954v 1.824459 0.880005 -4.847299v -7.842437 0.125980 2.658916v -7.871237 0.164134 2.484571v -1.882735 -0.597023 6.911063v -3.290739 1.733194 -3.668652v -3.112439 1.746233 -3.695233v 2.876163 0.985078 0.731159v -1.704436 -0.583983 6.884482v 2.847363 1.023232 0.556814v -2.009937 1.199972 1.768276v -2.171737 1.223710 1.468510v 4.759664 0.221735 3.779249v -0.047741 0.928333 -5.825329v 0.249058 0.885770 -5.988892v 7.180459 -0.116205 -3.678053v 5.056464 0.179172 3.615787v 7.018659 -0.092467 -3.977818v -6.162139 -0.080615 0.457512v -6.284139 -0.081831 0.125709v -1.751738 -0.072991 2.497522v -4.104342 -0.099368 -4.587022v -3.772442 -0.099791 -4.708923v 0.759959 -0.090951 -2.337111v -1.419838 -0.073414 2.375521v 0.637959 -0.092167 -2.669013v -10.079539 0.129395 -0.026881v -10.153939 0.098517 -0.385626v -6.068437 0.830482 2.588141v -7.346542 0.232441 -4.727837v -6.989942 0.276854 -4.805573v -2.904339 1.008917 -1.831806v -5.711737 0.874895 2.510406v -2.978739 0.977940 -2.190551v -1.452391 43.399460 2.082053v 0.638406 43.382641 -2.438177v -2.534886 49.877827 -1.186412v -2.644387 49.838749 -1.545669v -2.989186 49.877037 -1.396513v -2.879686 49.840710 -1.036965v 0.511306 43.379654 -2.790582v -3.720895 43.372410 -4.748092v -4.071695 43.374619 -4.616788v -6.162493 43.391335 -0.096458v -6.035392 43.390926 0.255842v -1.803191 43.398266 2.213352v 6.702892 30.231138 -0.801939v 6.552692 30.279114 -1.129769v 1.244688 24.182692 1.426856v 1.413988 24.156626 1.745518v 8.003588 23.204468 3.703029v 7.011592 30.212816 -0.993366v 8.317087 23.160721 3.527865v 10.383883 22.873259 -3.569563v 6.854093 30.210093 -1.321270v 10.214284 22.897022 -3.888128v 3.624683 23.849182 -5.845739v 3.311483 23.895227 -5.670472v -10.716609 29.932922 -2.562364v -10.779408 29.941486 -2.949953v -13.180216 23.156651 -1.762134v -13.103516 23.187298 -1.381489v -9.261613 23.858843 1.123190v -10.348009 30.016874 -2.668643v -8.884513 23.907467 1.038460v -6.196815 24.035721 -3.118659v -10.400208 29.948036 -3.051743v -6.273015 24.001474 -3.499109v -10.115017 23.329926 -6.003788v -10.492517 23.284904 -5.919253v -3.728621 23.306879 -10.574530v -3.760820 23.235527 -10.882135v -7.049924 18.206459 -8.640257v -7.003624 18.299425 -8.342321v -2.931721 19.428375 -5.564075v -3.421320 23.329588 -10.650497v -2.621022 19.434454 -5.618367v 0.558075 18.364902 -9.843332v -3.450421 23.213219 -10.944368v 0.511874 18.269936 -10.140570v -3.559928 17.140987 -12.918715v -3.870828 17.137009 -12.865122v 3.652269 13.779757 -11.601416v 3.757169 14.114601 -11.631727v 4.000769 14.015083 -11.757072v 3.883168 13.687227 -11.718750v 2.896273 15.387427 -7.941268v 3.046073 15.659662 -8.103172v 2.898573 15.593616 -8.345669v 2.755473 15.324659 -8.169060v 6.145774 18.617306 -10.946268v 6.005474 18.521254 -11.185509v 5.773674 18.647066 -11.056925v 5.904475 18.695391 -10.798754v 6.360074 15.394424 -7.117959v 6.604074 15.297108 -7.244102v 6.587173 15.017996 -7.029908v 6.356273 15.110524 -6.912573v -8.377918 15.228625 7.238123v -8.147820 15.714573 4.734528v -8.260419 15.982142 4.824418v -8.482018 15.514130 7.235739v -8.373619 15.981047 4.684316v -8.253719 15.712867 4.601526v -11.064119 15.392787 4.452361v -10.928720 15.443943 4.345235v -10.907721 15.154882 4.249313v -11.035220 15.107533 4.351345v -11.173019 14.927870 7.004086v -11.285819 14.924774 6.863682v -11.265220 14.621586 6.855041v -11.159419 14.623291 6.988042v -8.617918 15.464973 7.343168v -8.505419 15.181276 7.340254v 1.073782 15.401499 7.661369v 1.171682 15.438072 7.541923v 5.022481 15.097404 7.037023v 4.899282 15.151027 6.952501v 1.528582 13.780256 11.327110v 1.586283 13.973419 11.353092v 1.142182 15.556335 7.773695v 1.651782 13.726633 11.411633v 5.379382 13.439587 10.822212v 5.356882 13.635323 10.867397v 1.716083 13.915688 11.443008v 5.477282 13.476162 10.702765v 5.015782 15.258023 7.161258v 5.459882 13.675106 10.740555v 1.244982 15.594821 7.646351v 4.885882 15.314455 7.070740v -2.889622 19.172293 -5.371248v -7.094625 18.006477 -8.240347v -2.939798 30.619499 13.921648v -2.952698 30.872021 13.907516v -3.141397 30.857079 13.936594v -3.118098 30.606461 13.948229v -9.106700 31.367718 9.521837v -4.526102 32.936775 3.368514v -4.347802 32.949814 3.341933v 1.611900 32.226814 7.594080v 1.640700 32.188660 7.768425v -9.077900 31.329464 9.696180v 1.252888 23.847645 1.801268v 8.022588 22.869408 3.812241v 1.091088 23.871382 1.501502v 3.215183 23.576004 -5.792337v 3.511883 23.533543 -5.955900v 10.281584 22.555305 -3.944826v 10.443383 22.531567 -3.645061v 8.319287 22.826944 3.648679v -6.162093 42.907764 0.297738v -6.284093 42.906445 -0.034164v -1.419792 42.914864 2.215747v -1.751692 42.915283 2.337648v -4.104296 42.889011 -4.746796v 0.638005 42.896111 -2.828786v -3.772396 42.888485 -4.868797v 0.760005 42.897327 -2.496984v -5.995316 23.552343 -3.134663v -8.802713 23.418320 1.207548v -9.159313 23.373907 1.285283v -13.170515 22.672821 -1.329738v -10.766214 19.644032 6.689256v -10.880915 19.617134 6.550417v -10.744514 19.689674 6.453923v -10.619414 19.672085 6.585097v 4.012588 18.776922 11.009188v 3.914088 18.721138 11.135107v 3.791288 18.793972 11.044113v 3.885788 18.822271 10.906555v -3.855729 16.812840 -12.885693v -3.562029 16.818111 -12.934885v 0.642974 17.983927 -10.065887v 0.688375 18.072718 -9.785257v -7.140125 17.917686 -8.520977v -2.595922 19.177565 -5.420541v -4.532101 33.159000 3.489738v -9.049199 31.611565 9.557793v 1.535100 32.459026 7.654419v -4.343301 33.172245 3.460257v 1.564400 32.419357 7.839461v -9.019799 31.570194 9.742533v -4.038988 41.652824 10.753019v -4.227188 41.655163 10.795822v -4.019888 41.630051 10.943787v -4.206588 41.595501 10.978237v -10.080818 22.820278 -6.108430v -6.069715 23.521366 -3.493409v -13.244915 22.641943 -1.688484v -10.437518 22.775866 -6.030694";
var crystalNormals = "vn 0.858100 -0.051200 -0.510900vn 0.855600 -0.048600 -0.515400vn -0.181300 -0.913700 0.363800vn -0.181300 -0.913600 0.363900vn -0.181600 -0.913600 0.363800vn -0.181100 -0.913700 0.363900vn 0.223800 -0.960400 -0.165800vn 0.223900 -0.960400 -0.165900vn 0.223900 -0.960500 -0.165600vn 0.223900 -0.960400 -0.165800vn -0.131500 -0.912500 -0.387300vn -0.131500 -0.912400 -0.387500vn -0.131600 -0.912200 -0.387900vn -0.131900 -0.912500 -0.387200vn -0.131600 -0.912500 -0.387400vn -0.131500 -0.912600 -0.387200vn 0.066200 -0.954500 0.290800vn 0.066000 -0.954400 0.291100vn 0.065800 -0.954400 0.291100vn 0.065900 -0.954400 0.291200vn 0.065600 -0.954500 0.291000vn 0.066100 -0.954500 0.291000vn 0.038500 -0.974800 -0.219700vn 0.038500 -0.974800 -0.219900vn 0.038600 -0.974800 -0.219800vn -0.142600 -0.989800 -0.001400vn -0.142800 -0.989800 -0.001500vn 0.000000 -1.000000 0.003700vn 0.000100 -1.000000 0.003800vn 0.135700 -0.989100 0.057000vn 0.135700 -0.989100 0.057200vn 0.135600 -0.989100 0.057200vn 0.135600 -0.989100 0.057100vn 0.135500 -0.989100 0.057300vn 0.853600 0.341200 0.393600vn 0.898400 0.439100 -0.000600vn 0.548700 0.800200 0.242000vn 0.280400 0.741900 -0.609000vn 0.548700 0.800200 0.242100vn -0.547300 0.796700 -0.256100vn -0.547400 0.796700 -0.256100vn -0.280400 0.746500 0.603400vn 0.898400 0.439100 -0.000700vn 0.679200 0.444500 -0.584100vn 0.004000 0.443300 -0.896400vn 0.280400 0.741900 -0.609100vn -0.582500 0.436500 -0.685700vn -0.898400 0.439100 -0.002600vn -0.679200 0.448800 0.580800vn -0.679200 0.448700 0.580800vn -0.367900 0.369100 0.853500vn -0.280400 0.746600 0.603400vn 0.308200 0.469100 0.827700vn -0.047200 0.826600 0.560800vn -0.392500 0.907200 -0.151100vn -0.720700 0.681300 0.128200vn -0.451400 0.649600 0.611700vn -0.047200 0.826600 0.560900vn -0.451400 0.649600 0.611800vn 0.204100 0.554800 0.806500vn 0.632600 0.759100 0.153500vn 0.687700 0.477700 0.546600vn 0.883800 0.450500 -0.126400vn 0.278800 0.781200 -0.558500vn 0.883800 0.450500 -0.126500vn 0.616700 0.497500 -0.610100vn 0.278800 0.781300 -0.558500vn -0.038900 0.592200 -0.804900vn -0.392500 0.907300 -0.151100vn -0.524700 0.654000 -0.544900vn -0.524700 0.654000 -0.545000vn 0.632500 0.759200 0.153500vn -0.463400 0.719000 0.518000vn -0.608100 0.701500 -0.371500vn -0.940000 0.306300 -0.150100vn -0.810600 0.366700 0.456600vn -0.194000 0.474600 0.858600vn -0.463400 0.718900 0.518100vn 0.391700 0.876300 0.280400vn -0.463400 0.718900 0.518000vn 0.412300 0.542800 0.731700vn 0.412300 0.542700 0.731700vn 0.820900 0.562300 0.099900vn 0.261600 0.753500 -0.603200vn 0.689500 0.516700 -0.507600vn 0.261600 0.753400 -0.603200vn 0.072900 0.408900 -0.909700vn -0.531500 0.325800 -0.781900vn -0.608100 0.701600 -0.371500vn 0.391700 0.876300 0.280300vn -0.404900 0.883800 0.234600vn -0.498700 0.673400 -0.545700vn -0.854400 0.426600 -0.296500vn -0.854400 0.426700 -0.296500vn -0.762500 0.603100 0.234300vn -0.404900 0.883700 0.234600vn -0.762500 0.603100 0.234200vn -0.198000 0.759600 0.619500vn 0.388800 0.919400 0.059700vn 0.362300 0.764000 0.533800vn 0.781900 0.622900 -0.023800vn 0.299300 0.646700 -0.701600vn 0.688900 0.461300 -0.559100vn 0.124500 0.304800 -0.944300vn 0.299300 0.646700 -0.701500vn 0.124500 0.304800 -0.944200vn -0.434800 0.285500 -0.854100vn -0.434800 0.285600 -0.854000vn 0.388800 0.919400 0.059800vn -0.498700 0.673400 -0.545800vn -0.437100 0.053500 -0.897800vn -0.438600 0.056200 -0.896900vn -0.437500 0.054100 -0.897600vn -0.436000 0.051400 -0.898500vn -0.749100 0.591900 0.297600vn -0.751300 0.589700 0.296400vn -0.749600 0.591400 0.297300vn -0.747400 0.593600 0.298400vn 0.705300 0.697000 -0.129500vn 0.287700 0.445000 -0.848000vn -0.410900 0.786300 -0.461300vn -0.410900 0.786300 -0.461400vn -0.009500 0.957100 0.289500vn -0.757700 0.648400 -0.073300vn -0.757700 0.648500 -0.073200vn -0.443500 0.791300 0.420900vn 0.253800 0.735500 0.628200vn 0.761000 0.526900 0.378400vn 0.761000 0.527000 0.378400vn 0.932400 0.231800 -0.277400vn 0.287700 0.445000 -0.848100vn 0.932400 0.231800 -0.277500vn 0.620900 0.103100 -0.777100vn 0.620900 0.103000 -0.777100vn -0.076400 0.158800 -0.984300vn 0.287700 0.445100 -0.848000vn -0.586500 0.353400 -0.728800vn -0.410900 0.786400 -0.461300vn 0.544500 0.488000 0.682200vn 0.546500 0.488800 0.680000vn 0.545000 0.488200 0.681600vn 0.542900 0.487500 0.683900vn -0.955700 0.076500 -0.284100vn 0.231800 -0.399300 -0.887100vn 0.955700 -0.076500 0.284100vn -0.231800 0.399300 0.887100vn 0.928300 0.339800 0.151300vn 0.928300 0.339700 0.151200vn 0.683600 0.474800 -0.554300vn 0.683000 0.474100 -0.555600vn 0.684200 0.475600 -0.552800vn 0.684800 0.476400 -0.551400vn 0.683600 0.474800 -0.554200vn -0.653800 0.194400 -0.731300vn -0.652900 0.195400 -0.731800vn -0.654700 0.193300 -0.730800vn -0.655700 0.192100 -0.730200vn -0.778000 -0.069600 0.624400vn -0.776900 -0.070600 0.625700vn -0.779200 -0.068600 0.623000vn -0.780400 -0.067600 0.621600vn 0.558900 0.212400 0.801600vn 0.557400 0.212800 0.802500vn 0.560400 0.212000 0.800600vn 0.562000 0.211600 0.799600vn 0.089900 0.189800 -0.977700vn -0.970500 -0.204000 -0.128800vn -0.970500 -0.204000 -0.128700vn -0.089900 -0.189800 0.977700vn 0.970500 0.204000 0.128800vn -0.776000 0.337800 -0.532600vn -0.776200 0.337800 -0.532400vn 0.616700 0.230500 -0.752700vn -0.941000 0.250500 0.227500vn -0.941000 0.250600 0.227600vn 0.137200 -0.207300 0.968600vn 0.137100 -0.207800 0.968500vn 0.137200 -0.207400 0.968600vn 0.991700 0.101700 -0.078000vn 0.991800 0.101600 -0.078100vn -0.083500 0.579700 -0.810600vn -0.083600 0.579300 -0.810800vn -0.083500 0.579600 -0.810600vn -0.703900 0.592400 -0.391900vn -0.705700 0.590700 -0.391200vn -0.703300 0.593000 -0.392000vn -0.701400 0.594800 -0.392800vn -0.551700 0.051500 0.832400vn -0.552500 0.053200 0.831800vn -0.551400 0.050800 0.832700vn -0.550500 0.048900 0.833400vn -0.551700 0.051400 0.832500vn 0.781900 -0.051800 0.621300vn 0.783300 -0.053000 0.619400vn 0.781400 -0.051500 0.621900vn 0.779900 -0.050300 0.623800vn 0.630000 0.490100 -0.602400vn 0.631500 0.490700 -0.600400vn 0.629600 0.489900 -0.603000vn 0.628100 0.489300 -0.605100vn 0.630100 0.490000 -0.602400vn -0.984900 0.075800 0.155700vn 0.112700 -0.401900 0.908700vn 0.984900 -0.075800 -0.155700vn -0.112700 0.401900 -0.908700vn -0.589300 0.198300 0.783200vn 0.144700 0.060700 0.987600vn 0.147100 0.062800 0.987100vn 0.145600 0.061400 0.987400vn 0.145500 0.061400 0.987500vn 0.143000 0.059200 0.988000vn 0.144700 0.060600 0.987600vn -0.810100 0.098300 -0.578000vn 0.585000 0.200400 -0.785900vn 0.810100 -0.098300 0.578000vn -0.585000 -0.200400 0.785900vn -0.233900 0.289400 0.928200vn -0.233900 0.289300 0.928200vn -0.233800 0.289600 0.928100vn -0.757900 0.477900 0.444200vn -0.759900 0.476100 0.442700vn -0.757800 0.477900 0.444200vn -0.755700 0.479800 0.445900vn -0.391000 0.426800 -0.815500vn -0.392300 0.429000 -0.813700vn -0.391100 0.426800 -0.815400vn -0.389800 0.424500 -0.817200vn 0.862100 0.245700 -0.443200vn 0.863600 0.243300 -0.441600vn 0.862200 0.245600 -0.443100vn 0.862100 0.245600 -0.443200vn 0.860500 0.248100 -0.444800vn 0.495200 0.296500 0.816600vn 0.496900 0.298200 0.814900vn 0.493300 0.294700 0.818400vn -0.949500 0.137200 -0.282100vn 0.279400 -0.038900 -0.959400vn 0.949500 -0.137200 0.282100vn -0.279400 0.038900 0.959400vn -0.938600 0.001300 0.345000vn -0.938600 0.001300 0.345100vn 0.345000 0.003500 0.938600vn 0.344800 0.003500 0.938700vn -0.894000 0.170900 -0.414200vn -0.894000 0.171000 -0.414100vn 0.412800 0.178700 -0.893100vn 0.412800 0.178800 -0.893100vn 0.894000 0.174000 0.412900vn -0.412800 0.185600 0.891700vn -0.412800 0.185500 0.891700vn -0.412800 0.186000 0.891600vn -0.905200 0.268000 0.329700vn -0.906600 0.266100 0.327400vn -0.905700 0.267400 0.328900vn -0.904300 0.269300 0.331300vn -0.334300 0.262700 -0.905100vn -0.336600 0.264500 -0.903700vn -0.335100 0.263300 -0.904600vn -0.332700 0.261400 -0.906100vn 0.905200 0.265600 -0.331700vn 0.906700 0.263600 -0.329300vn 0.905700 0.264900 -0.330900vn 0.904200 0.267000 -0.333400vn 0.334100 0.269500 0.903200vn 0.336600 0.271400 0.901700vn 0.335000 0.270200 0.902700vn 0.332400 0.268100 0.904200vn -0.907600 -0.001600 -0.419800vn 0.419800 -0.003400 -0.907600vn 0.907600 0.001600 0.419800vn -0.419800 0.003400 0.907600vn 0.828900 0.144900 0.540400vn -0.542800 -0.025900 0.839500vn -0.236500 0.620000 0.748100vn -0.530500 0.102000 0.841500vn -0.147400 0.078500 0.986000vn -0.854100 0.519700 0.022300vn -0.115200 0.861100 -0.495300vn -0.236600 0.620000 0.748100vn 0.543300 0.813400 0.207800vn -0.854100 0.519700 0.022200vn -0.940100 0.102800 0.324900vn -0.871600 0.247900 -0.422900vn -0.854100 0.519600 0.022300vn -0.115200 0.861000 -0.495300vn -0.377900 0.424900 -0.822600vn -0.871600 0.247900 -0.423000vn 0.371200 0.582400 -0.723200vn 0.371200 0.582300 -0.723300vn -0.115200 0.861100 -0.495200vn 0.777700 0.594600 -0.204200vn 0.371200 0.582300 -0.723200vn 0.860800 0.472200 0.189800vn 0.860800 0.472300 0.189800vn 0.488000 0.374200 0.788600vn -0.622500 -0.010000 -0.782500vn -0.749800 -0.278500 0.600200vn -0.749600 -0.278400 0.600400vn -0.749600 -0.278500 0.600500vn -0.749900 -0.278400 0.600100vn 0.749600 0.278400 -0.600400vn 0.622800 0.010100 0.782300vn 0.622500 0.010000 0.782500vn 0.622600 0.010000 0.782500vn 0.622900 0.010100 0.782300vn 0.058700 0.318200 -0.946200vn 0.058700 0.318300 -0.946200vn -0.992500 -0.064100 -0.103700vn -0.992500 -0.064500 -0.103700vn -0.992500 -0.064400 -0.103700vn -0.992600 -0.063800 -0.103700vn -0.119400 -0.057500 0.991200vn 0.681900 0.696400 0.223600vn 0.887500 0.230800 0.398700vn 0.804300 0.527800 -0.272900vn 0.887600 0.230800 0.398700vn 0.173000 0.442500 0.879900vn -0.468400 0.785100 0.405300vn 0.028700 0.958000 -0.285400vn 0.512900 0.100700 0.852500vn -0.205200 0.155800 0.966200vn -0.468400 0.785100 0.405200vn -0.677300 0.351200 0.646500vn -0.760900 0.648300 -0.025500vn -0.677300 0.351300 0.646500vn -0.384200 0.792600 -0.473500vn 0.334500 0.737200 -0.587000vn 0.334500 0.737300 -0.587000vn -0.616400 -0.230700 0.752900vn -0.616500 -0.230600 0.752900vn -0.616700 -0.230500 0.752700vn 0.776000 -0.337800 0.532600vn -0.152500 -0.298000 -0.942300vn 0.986100 0.017700 -0.165100vn -0.986100 -0.017600 0.165500vn -0.986100 -0.017600 0.165400vn 0.152900 0.298000 0.942200vn 0.152800 0.298000 0.942200vn -0.798900 0.001000 -0.601400vn -0.798900 0.001100 -0.601400vn -0.799000 0.000600 -0.601400vn 0.556000 0.038000 -0.830300vn 0.768800 0.435700 0.468200vn 0.768700 0.435800 0.468100vn -0.587800 0.422700 0.689800vn -0.587800 0.422700 0.689700vn -0.947700 0.314900 0.051600vn -0.948700 0.312100 0.050000vn -0.947800 0.314700 0.051400vn -0.947800 0.314800 0.051500vn -0.946700 0.317600 0.053000vn -0.947700 0.315000 0.051600vn -0.168000 0.052400 -0.984400vn -0.170300 0.054500 -0.983900vn -0.168200 0.052600 -0.984300vn -0.168200 0.052500 -0.984400vn -0.165900 0.050400 -0.984900vn 0.901800 0.349500 -0.254200vn 0.903000 0.348200 -0.251600vn 0.901900 0.349400 -0.254000vn 0.900700 0.350600 -0.256600vn 0.122400 0.611300 0.781900vn 0.124300 0.613000 0.780200vn 0.122500 0.611500 0.781700vn 0.120500 0.609700 0.783400vn -0.805200 -0.223200 -0.549400vn 0.589300 -0.198300 -0.783200vn 0.805200 0.223200 0.549400vn -0.159200 0.211200 -0.964400vn 0.986500 0.072200 -0.147100vn -0.986500 -0.072200 0.147100vn 0.159200 -0.211200 0.964400vn -0.804300 0.267700 -0.530500vn -0.804300 0.267900 -0.530400vn 0.567700 0.377800 -0.731400vn 0.567700 0.377600 -0.731500vn 0.567700 0.378000 -0.731400vn 0.790700 0.074400 0.607600vn -0.582000 -0.016100 0.813000vn -0.582000 -0.016400 0.813000vn 0.757100 0.567900 -0.322900vn 0.156100 0.640800 -0.751700vn 0.359500 0.862000 -0.357300vn -0.517000 0.838700 -0.171200vn -0.456000 0.589600 -0.666600vn -0.456000 0.589700 -0.666600vn -0.895100 0.439200 -0.076700vn 0.455300 0.720900 0.522500vn 0.359500 0.862000 -0.357400vn -0.517000 0.838700 -0.171300vn -0.417200 0.596200 0.685900vn 0.455300 0.720800 0.522700vn -0.792100 0.315900 0.522300vn -0.191200 0.243000 0.951000vn 0.455300 0.720800 0.522600vn -0.417200 0.596200 0.686000vn 0.421500 0.279400 0.862700vn 0.860700 0.429900 0.272700vn -0.190000 0.577000 0.794400vn -0.189900 0.577100 0.794200vn 0.972700 0.101200 0.208600vn 0.972700 0.101100 0.208700vn 0.263900 -0.204800 -0.942600vn -0.902800 0.251200 -0.349000vn 0.512000 0.228200 0.828100vn 0.512200 0.228100 0.828000vn 0.511900 0.228200 0.828200vn -0.839700 0.336400 0.426300vn 0.839700 -0.336400 -0.426300vn -0.511800 -0.228300 -0.828200vn -0.512100 -0.228200 -0.828100vn -0.512200 -0.228100 -0.828000vn 0.542800 0.025900 -0.839500vn -0.828900 -0.144900 -0.540400vn 0.160600 0.344500 0.925000vn 0.162900 0.346600 0.923800vn 0.161400 0.345100 0.924600vn 0.161400 0.345200 0.924600vn 0.159100 0.343000 0.925800vn 0.160600 0.344400 0.925000vn 0.898900 0.380400 -0.217200vn 0.900300 0.378700 -0.214400vn 0.899400 0.379800 -0.216200vn 0.899400 0.379800 -0.216300vn 0.898000 0.381600 -0.219200vn 0.898900 0.380400 -0.217300vn -0.232800 0.181900 -0.955300vn -0.235600 0.183500 -0.954400vn -0.233800 0.182400 -0.955000vn -0.230900 0.180800 -0.956000vn -0.232800 0.181900 -0.955400vn -0.971300 0.147400 0.186700vn -0.972100 0.145100 0.184200vn -0.971600 0.146600 0.185900vn -0.970700 0.149000 0.188500vn -0.558400 0.154700 0.815000vn -0.558400 0.154600 0.815000vn 0.793100 0.313200 0.522400vn 0.793100 0.313300 0.522400vn 0.509000 0.205600 -0.835900vn 0.508900 0.205800 -0.835800vn -0.839800 0.027900 -0.542100vn -0.839800 0.028000 -0.542100vn 0.202200 0.084100 0.975700vn -0.969900 -0.120800 0.211500vn 0.969900 0.120800 -0.211600vn -0.202200 -0.084100 -0.975700vn 0.938600 -0.001300 -0.345100vn 0.938600 -0.001300 -0.345000vn -0.344800 -0.003500 -0.938700vn -0.345000 -0.003500 -0.938600vn 0.955900 0.105500 0.274100vn 0.955900 0.105800 0.274000vn 0.955900 0.105900 0.274100vn 0.306500 0.214200 -0.927500vn -0.887100 0.372000 -0.273400vn -0.887000 0.372100 -0.273400vn 0.473600 -0.069500 0.878000vn 0.474000 -0.069600 0.877800vn -0.869000 0.124500 0.478900vn 0.869000 -0.124500 -0.478900vn -0.473800 0.069500 -0.877900vn -0.474000 0.069600 -0.877800vn 0.939300 0.333700 -0.080100vn 0.940300 0.331200 -0.077900vn 0.939600 0.332900 -0.079300vn 0.939600 0.333000 -0.079300vn 0.938500 0.335500 -0.081600vn -0.165600 0.467000 -0.868600vn -0.168300 0.468600 -0.867300vn -0.166500 0.467400 -0.868200vn -0.166500 0.467500 -0.868200vn -0.163700 0.465900 -0.869600vn -0.960200 0.195500 0.199500vn -0.961100 0.194100 0.196400vn -0.960500 0.195100 0.198400vn -0.960500 0.195100 0.198500vn -0.959500 0.196500 0.201600";
var crystalFaces = "f 1/1/1 2/2/1 3/3/1f 3/3/2 4/4/2 1/1/2f 5/5/3 6/6/3 7/7/3f 6/6/4 8/8/4 9/9/4f 6/6/4 9/9/4 10/10/4f 6/6/4 10/10/4 7/7/4f 10/10/5 11/11/6 7/7/6f 9/9/3 12/12/3 10/10/3f 13/13/7 14/14/7 15/15/7f 16/16/8 17/17/8 14/14/9f 18/18/10 16/16/10 14/14/10f 13/13/10 18/18/10 14/14/10f 13/13/8 19/19/8 18/18/8f 18/18/7 20/20/7 16/16/7f 21/21/11 22/22/12 23/23/13f 24/24/14 25/25/14 22/22/15f 26/26/11 24/24/11 22/22/11f 21/21/11 26/26/11 22/22/11f 21/21/11 27/27/11 26/26/11f 26/26/16 28/28/16 24/24/16f 29/29/17 30/30/18 31/31/19f 30/30/20 32/32/20 33/33/20f 30/30/20 33/33/20 34/34/20f 30/30/20 34/34/20 31/31/20f 34/34/18 35/35/21 31/31/21f 33/33/20 36/36/22 34/34/22f 37/37/23 38/38/23 39/39/23f 38/38/24 40/40/24 41/41/24f 38/38/25 41/41/25 42/42/25f 38/38/25 42/42/25 39/39/25f 42/42/24 43/43/24 39/39/24f 41/41/23 44/44/23 42/42/23f 45/45/26 46/46/26 47/47/26f 46/46/27 48/48/27 49/49/27f 46/46/26 49/49/26 50/50/26f 46/46/26 50/50/26 47/47/26f 50/50/27 51/51/27 47/47/27f 49/49/26 52/52/26 50/50/26f 53/53/28 54/54/28 55/55/28f 54/54/29 56/56/29 57/57/29f 54/54/28 57/57/28 58/58/28f 54/54/28 58/58/28 55/55/28f 58/58/29 59/59/29 55/55/29f 57/57/28 60/60/28 58/58/28f 61/5/30 62/6/30 63/7/30f 62/6/31 64/8/31 65/9/31f 62/6/32 65/9/32 66/10/32f 62/6/33 66/10/33 63/7/33f 66/10/33 67/11/33 63/7/33f 65/9/34 68/12/34 66/10/34f 69/61/35 70/62/36 71/63/37f 72/64/38 71/63/39 70/62/36f 71/63/39 72/64/38 73/65/40f 73/65/41 74/66/42 71/63/39f 70/62/43 75/67/44 72/64/38f 75/67/44 76/68/45 72/64/46f 73/65/40 72/64/38 76/68/45f 76/68/45 77/69/47 73/65/41f 77/69/47 78/70/48 73/65/41f 74/66/42 73/65/41 78/70/48f 78/70/48 79/71/49 74/66/42f 79/71/50 80/72/51 74/66/42f 71/63/37 74/66/52 80/72/51f 80/72/53 69/61/53 71/63/53f 81/73/54 82/74/55 83/75/56f 83/75/56 84/76/57 81/73/58f 84/76/59 85/77/60 81/73/54f 86/78/61 81/73/54 85/77/60f 85/77/60 87/79/62 86/78/61f 87/79/62 88/80/63 86/78/61f 89/81/64 86/78/61 88/80/65f 88/80/63 90/82/66 89/81/67f 90/82/66 91/83/68 89/81/67f 82/74/69 89/81/67 91/83/68f 91/83/68 92/84/70 82/74/69f 92/84/71 83/75/56 82/74/69f 86/78/72 89/81/64 82/74/69f 82/74/69 81/73/54 86/78/61f 93/85/73 94/86/74 95/87/75f 95/87/75 96/88/76 93/85/73f 96/88/76 97/89/77 93/85/78f 98/90/79 93/85/80 97/89/77f 97/89/77 99/91/81 98/90/79f 99/91/82 100/3/83 98/90/79f 101/92/84 98/90/79 100/3/83f 100/3/83 102/2/85 101/92/86f 102/2/85 103/93/87 101/92/84f 94/86/74 101/92/84 103/93/87f 103/93/87 104/94/88 94/86/89f 104/94/88 95/87/75 94/86/74f 98/90/79 101/92/84 94/86/89f 94/86/89 93/85/78 98/90/90f 105/95/91 106/96/92 107/97/93f 107/97/94 108/98/95 105/95/96f 108/98/97 109/99/98 105/95/96f 110/100/99 105/95/91 109/99/98f 109/99/98 111/101/100 110/100/99f 111/101/100 112/102/101 110/100/99f 113/103/102 110/100/99 112/102/101f 112/102/101 114/104/103 113/103/102f 114/104/103 115/105/104 113/103/102f 106/96/92 113/103/105 115/105/106f 115/105/104 116/106/107 106/96/92f 116/106/108 107/97/94 106/96/92f 110/100/109 113/103/102 106/96/92f 106/96/110 105/95/91 110/100/99f 117/107/111 118/94/112 119/93/113f 119/93/113 120/108/114 117/107/111f 121/109/115 122/88/116 123/87/117f 123/87/117 124/110/118 121/109/115f 125/90/119 126/92/120 127/86/121f 127/86/122 128/85/123 125/90/119f 128/85/123 127/86/121 123/87/124f 123/87/125 122/88/126 128/85/123f 122/88/126 129/89/127 128/85/123f 125/90/119 128/85/123 129/89/127f 129/89/127 130/91/128 125/90/119f 130/91/129 3/3/130 125/90/119f 126/92/131 125/90/119 3/3/132f 3/3/130 2/2/133 126/92/131f 2/2/134 119/93/135 126/92/120f 127/86/121 126/92/136 119/93/135f 119/93/135 118/94/137 127/86/138f 118/94/137 123/87/124 127/86/121f 131/111/139 130/91/140 129/89/141f 129/89/141 132/112/142 131/111/139f 8/113/143 6/114/143 124/115/143f 124/115/143 117/116/143 8/113/143f 12/7/144 9/5/144 120/117/144f 120/117/144 1/118/144 12/7/144f 11/113/145 10/114/145 4/115/145f 4/115/145 131/116/145 11/113/145f 5/7/146 7/5/146 132/119/146f 132/119/146 121/120/146 5/7/146f 133/121/147 134/122/147 135/123/147f 135/123/148 136/124/148 133/121/148f 137/125/149 135/126/150 134/127/151f 134/127/151 138/128/152 137/125/153f 139/129/154 140/130/155 141/131/156f 141/131/156 142/132/157 139/129/154f 143/133/158 144/134/159 145/135/160f 145/135/160 146/136/161 143/133/158f 136/137/162 147/138/163 148/139/164f 148/139/164 133/140/165 136/137/162f 138/141/166 14/142/166 17/143/166f 17/143/166 141/144/166 138/141/166f 142/145/167 16/15/167 20/13/167f 20/13/168 145/146/168 142/145/168f 146/141/169 18/142/169 19/143/169f 19/143/169 148/144/169 146/141/169f 133/121/170 13/15/170 15/13/170f 15/13/170 134/122/170 133/121/170f 22/147/171 149/148/171 150/149/171f 150/149/172 23/150/172 22/147/172f 151/151/173 27/152/173 21/153/173f 21/153/173 152/154/173 151/151/173f 149/148/174 153/151/174 154/155/174f 154/155/175 155/156/175 149/148/175f 156/157/176 157/158/177 158/159/177f 158/159/178 159/160/178 156/157/178f 160/148/179 151/151/179 161/155/179f 161/155/180 162/156/180 160/148/180f 152/161/181 150/162/182 163/163/182f 163/163/183 164/164/183 152/161/183f 155/165/184 163/166/185 150/167/186f 150/167/186 149/168/187 155/165/184f 159/169/188 154/170/189 153/171/190f 153/171/190 156/172/191 159/169/192f 162/173/193 158/174/194 157/175/195f 157/175/195 160/176/196 162/173/193f 164/177/197 161/178/198 151/179/199f 151/179/199 152/180/200 164/177/201f 149/148/202 22/147/202 25/152/202f 25/152/202 153/151/202 149/148/202f 156/157/203 24/23/203 28/21/203f 28/21/203 157/158/203 156/157/203f 160/148/204 26/147/204 27/152/204f 27/152/204 151/151/204 160/148/204f 152/161/205 21/23/205 23/21/205f 23/21/205 150/162/205 152/161/205f 29/31/206 31/29/206 165/181/206f 165/181/206 166/182/206 29/31/206f 167/183/207 168/184/208 169/185/209f 169/185/210 170/186/211 167/183/212f 40/187/213 38/188/213 171/189/213f 171/189/213 172/190/213 40/187/213f 44/39/214 41/37/214 173/191/214f 173/191/214 174/192/214 44/39/214f 43/187/215 42/188/215 175/189/215f 175/189/215 167/190/215 43/187/215f 37/39/216 39/37/216 170/193/216f 170/193/216 176/194/216 37/39/216f 84/195/217 177/196/217 178/197/217f 178/197/218 85/198/218 84/195/219f 177/199/220 84/76/221 83/75/220f 83/75/222 179/200/223 177/199/222f 180/201/224 92/84/225 91/83/226f 91/83/226 181/202/227 180/201/224f 182/203/228 90/82/229 88/80/230f 88/80/231 183/204/232 182/203/228f 184/205/233 87/79/234 85/77/233f 85/77/233 178/206/235 184/205/233f 48/207/236 46/208/236 179/209/236f 179/209/236 180/210/236 48/207/236f 52/47/237 49/45/237 181/211/237f 181/211/237 182/212/237 52/47/237f 51/207/238 50/208/238 183/209/238f 183/209/238 184/210/238 51/207/238f 45/47/239 47/45/239 178/197/239f 178/197/239 177/196/239 45/47/239f 185/213/240 186/214/240 54/215/240f 54/215/241 53/216/241 185/213/241f 55/217/242 59/218/242 187/219/242f 187/219/243 188/220/243 55/217/243f 77/221/244 189/219/244 186/214/244f 186/214/245 78/222/245 77/221/245f 75/223/246 190/224/246 191/225/246f 191/225/247 76/226/247 75/223/247f 69/221/248 187/219/248 192/214/248f 192/214/248 70/222/248 69/221/248f 79/227/249 185/228/249 188/229/249f 188/229/250 80/230/250 79/227/251f 185/231/252 79/71/253 78/70/254f 78/70/254 186/232/255 185/231/252f 189/233/256 77/69/257 76/68/258f 76/68/258 191/234/259 189/233/256f 190/235/260 75/67/261 70/62/262f 70/62/262 192/236/263 190/235/260f 187/237/264 69/61/265 80/72/266f 80/72/266 188/238/267 187/237/264f 56/218/268 54/215/268 186/214/268f 186/214/268 189/219/268 56/218/268f 60/55/269 57/53/269 191/225/269f 191/225/269 190/224/269 60/55/269f 59/218/270 58/215/270 192/214/270f 192/214/270 187/219/270 59/218/270f 53/55/271 55/53/271 188/229/271f 188/229/271 185/228/271 53/55/271f 67/113/272 66/114/272 193/115/272f 193/115/272 194/116/272 67/113/272f 61/7/273 63/5/273 195/119/273f 195/119/273 196/120/273 61/7/273f 197/239/274 143/133/275 147/138/276f 143/133/275 197/239/274 198/240/277f 199/241/278 198/240/277 197/239/274f 197/239/279 200/242/280 199/241/278f 198/240/281 144/134/282 143/133/275f 198/240/277 139/129/283 144/134/282f 139/129/283 198/240/284 199/241/278f 199/241/285 140/130/286 139/129/287f 199/241/278 137/125/288 140/130/286f 137/125/289 199/241/290 200/242/280f 200/242/280 135/126/291 137/125/292f 200/242/280 136/137/293 135/126/291f 136/137/294 200/242/280 197/239/274f 197/239/295 147/138/295 136/137/295f 141/144/296 17/143/296 16/243/296f 16/243/296 142/244/296 141/144/296f 145/146/297 20/13/298 18/245/298f 18/245/299 146/246/300 145/146/300f 14/142/301 138/141/301 134/247/301f 134/247/301 15/248/301 14/142/301f 148/144/302 19/143/303 13/243/303f 13/243/304 133/244/305 148/144/305f 138/141/306 141/144/306 140/249/306f 140/249/307 137/250/307 138/141/307f 142/145/308 145/146/309 144/251/309f 144/251/310 139/252/311 142/145/311f 146/141/312 148/144/312 147/249/312f 147/249/312 143/250/312 146/141/312f 201/253/313 162/173/314 161/178/315f 162/173/316 201/253/313 202/254/317f 203/255/318 202/254/317 201/253/313f 201/253/313 204/256/319 203/255/318f 202/254/317 158/174/320 162/173/316f 202/254/317 159/169/321 158/174/320f 159/169/321 202/254/317 203/255/322f 203/255/322 154/170/323 159/169/321f 203/255/318 155/165/324 154/170/325f 155/165/324 203/255/318 204/256/319f 204/256/319 163/166/326 155/165/324f 204/256/319 164/177/327 163/166/326f 164/177/328 204/256/319 201/253/313f 201/253/313 161/178/315 164/177/327f 153/151/329 25/152/329 24/153/329f 24/153/330 156/154/331 153/151/331f 157/158/332 28/21/332 26/257/332f 26/257/332 160/258/332 157/158/332f 33/259/333 32/260/333 205/261/333f 205/261/333 206/262/333 33/259/333f 34/263/334 36/31/334 207/264/334f 207/264/334 208/265/334 34/263/334f 166/266/335 209/267/335 30/268/335f 30/268/336 29/269/336 166/266/336f 31/259/337 35/260/337 210/261/337f 210/261/338 165/262/338 31/259/338f 116/270/339 205/261/339 209/267/339f 209/267/340 107/271/340 116/270/341f 114/272/342 207/264/342 206/273/342f 206/273/342 115/274/342 114/272/342f 111/270/343 210/261/343 208/267/343f 208/267/344 112/271/344 111/270/344f 108/275/345 166/182/345 165/181/345f 165/181/346 109/276/346 108/275/346f 166/277/347 108/98/348 107/97/349f 107/97/350 209/278/351 166/277/352f 205/279/353 116/106/354 115/105/355f 115/105/356 206/280/357 205/279/353f 207/281/358 114/104/359 112/102/360f 112/102/360 208/282/361 207/281/358f 210/283/362 111/101/363 109/99/364f 109/99/364 165/284/365 210/283/362f 32/260/366 30/268/366 209/267/366f 209/267/366 205/261/366 32/260/366f 36/31/367 33/29/367 206/273/367f 206/273/367 207/264/367 36/31/367f 208/267/368 210/261/368 35/260/368f 35/260/368 34/268/368 208/267/368f 41/285/369 40/187/369 172/190/369f 172/190/369 173/286/369 41/285/369f 42/287/370 44/39/370 174/192/370f 174/192/370 175/288/370 42/287/370f 176/289/371 171/189/371 38/188/371f 38/188/371 37/290/371 176/289/371f 39/285/372 43/187/372 167/190/372f 167/190/372 170/286/372 39/285/372f 211/291/373 172/190/373 171/189/373f 171/189/374 212/292/374 211/291/374f 213/293/375 174/192/375 173/191/375f 173/191/376 214/294/376 213/293/377f 168/291/378 167/190/378 175/189/378f 175/189/378 215/292/378 168/291/378f 216/295/379 176/194/379 170/193/379f 170/193/380 169/296/380 216/295/380f 213/297/381 214/298/382 217/299/383f 218/300/384 217/299/383 214/298/382f 214/298/382 211/301/385 218/300/384f 211/301/386 212/302/387 218/300/384f 219/303/388 217/299/389 218/300/390f 218/300/384 220/304/391 219/303/392f 220/304/391 218/300/384 212/302/387f 212/302/387 216/305/393 220/304/391f 216/305/393 169/185/394 220/304/391f 219/303/395 220/304/396 169/185/394f 169/185/394 168/184/397 219/303/392f 168/184/397 215/306/398 219/303/395f 217/299/383 219/303/395 215/306/398f 215/306/398 213/297/381 217/299/389f 122/307/399 121/120/399 132/119/399f 132/119/400 129/308/400 122/307/400f 130/309/401 131/116/401 4/115/401f 4/115/402 3/310/402 130/309/402f 2/311/403 1/118/403 120/117/403f 120/117/403 119/312/403 2/311/403f 118/309/404 117/116/404 124/115/404f 124/115/404 123/310/404 118/309/404f 7/313/405 11/113/405 131/116/405f 131/116/406 132/314/406 7/313/407f 121/315/408 124/115/408 6/114/408f 6/114/408 5/316/408 121/315/408f 10/317/409 12/7/409 1/118/409f 1/118/409 4/318/409 10/317/409f 9/313/410 8/113/410 117/116/411f 117/116/412 120/314/412 9/313/410f 68/7/413 65/5/413 221/117/413f 221/117/413 222/118/413 68/7/413f 64/113/414 62/114/414 223/115/414f 223/115/414 224/116/414 64/113/414f 194/111/415 99/91/416 97/89/417f 97/89/418 195/112/419 194/111/420f 222/1/421 102/2/422 100/3/423f 100/3/424 193/4/425 222/1/426f 224/107/427 104/94/428 103/93/429f 103/93/429 221/108/430 224/107/431f 196/109/432 96/88/433 95/87/434f 95/87/434 223/110/435 196/109/432f 96/307/436 196/120/436 195/119/436f 195/119/437 97/308/437 96/307/437f 99/309/438 194/116/438 193/115/438f 193/115/439 100/310/439 99/309/439f 102/311/440 222/118/440 221/117/440f 221/117/441 103/312/441 102/311/441f 104/309/442 224/116/442 223/115/442f 223/115/443 95/310/443 104/309/443f 63/313/444 67/113/444 194/116/444f 194/116/444 195/314/444 63/313/444f 196/315/445 223/115/445 62/114/445f 62/114/445 61/316/445 196/315/445f 66/317/446 68/7/446 222/118/446f 222/118/446 193/318/446 66/317/446f 65/313/447 64/113/447 224/116/447f 224/116/447 221/314/447 65/313/447f 190/224/448 192/319/448 58/320/448f 58/320/449 60/55/449 190/224/449f 57/217/450 56/218/450 189/219/450f 189/219/451 191/220/451 57/217/451f 87/321/452 184/210/452 183/209/453f 183/209/454 88/322/454 87/321/454f 90/323/455 182/212/455 181/211/455f 181/211/455 91/324/455 90/323/455f 92/321/456 180/210/456 179/209/456f 179/209/457 83/322/457 92/321/457f 47/325/458 51/207/458 184/210/459f 184/210/459 178/326/459 47/325/459f 177/327/460 179/209/460 46/208/460f 46/208/460 45/328/460 177/327/460f 50/329/461 52/47/461 182/212/461f 182/212/461 183/330/461 50/329/461f 49/325/462 48/207/462 180/210/462f 180/210/463 181/326/463 49/325/463f 174/331/464 213/297/465 215/306/466f 215/306/467 175/332/468 174/331/464f 172/333/469 211/301/470 214/298/471f 214/298/472 173/334/473 172/333/469f 176/335/474 216/305/475 212/302/476f 212/302/477 171/336/478 176/335/474";
var crystal1 = new Model(crystalVertices, crystalNormals, crystalFaces, [64, 224, 208]);
var crystal2 = new Model(crystalVertices, crystalNormals, crystalFaces, [64, 224, 208]);

var crysModelMatrix = m4.multiply(m4.axisRotation([1, 0, 0], toRad(90)), m4.scaling([3, 3, 3]));
crystal1.applyModelTransform(m4.multiply(crysModelMatrix, m4.translation([150, 0, 0])));
crystal2.applyModelTransform(m4.multiply(crysModelMatrix, m4.translation([-150, 0, 0])));

var droneVertices = "v 0.303473 0.005617 -1.211871v 0.127730 0.616744 -1.109357v 0.175919 0.342093 -0.594303v 0.303473 0.005617 -0.594303v 0.175919 0.342093 -0.372172v 0.303473 0.005617 -0.372172v 0.303473 0.005617 -1.006364v 0.175919 0.342093 -1.006364v -0.075947 0.342093 -1.393169v -0.030242 0.005617 -1.550670v -0.016629 0.872910 -1.081941v -0.030242 0.342093 -1.550670v 0.303473 0.342093 -1.211871v 0.303473 0.342093 -0.372172v 0.303473 0.342093 -1.006364v 0.303473 0.342093 -0.594303v -0.093214 0.616744 -1.333667v 0.175919 0.342093 -1.137466v 0.127730 0.616744 -0.372172v 0.127730 0.616744 -1.006364v 0.127730 0.616744 -0.594303v 0.743329 0.881971 -2.202225v 0.966651 0.881971 -1.975500v 0.966651 0.656800 -1.975500v 0.743329 0.656800 -2.202225v 1.149794 0.881971 -2.520622v 1.291157 0.881971 -2.377105v 1.373741 0.656800 -2.376480v 1.150419 0.656800 -2.603205v 1.248747 0.839099 -2.615010v 1.387031 0.839099 -2.474620v 1.387031 0.699671 -2.474620v 1.248747 0.699671 -2.615010v 0.854990 0.881971 -2.088863v 1.220476 0.881971 -2.448863v 1.170820 0.881971 -2.258574v 1.029458 0.881971 -2.402091v 1.100139 0.881971 -2.330333v 1.262080 0.881971 -2.489843v 1.373741 0.881971 -2.376480v 1.170196 0.881971 -2.175990v 1.150419 0.881971 -2.603205v 0.946874 0.881971 -2.402715v 1.058535 0.881971 -2.289353v 1.192662 1.087966 -2.421467v 1.235947 1.087966 -2.377522v 1.171238 1.087966 -2.313784v 1.149377 1.087966 -2.465411v 1.084668 1.087966 -2.401674v 1.127953 1.087966 -2.357729v 1.220476 1.034513 -2.448863v 1.291157 1.034513 -2.377105v 1.170820 1.034513 -2.258574v 1.149794 1.034513 -2.520622v 1.029458 1.034513 -2.402091v 1.100139 1.034513 -2.330333v -1.031135 0.005617 -1.211871v -0.855392 0.616744 -1.109357v -0.363831 0.342093 -1.393169v -0.363831 0.005617 -1.550670v -0.903581 0.342093 -0.594303v -1.031135 0.005617 -0.594303v -0.903581 0.342093 -0.372172v -1.031135 0.005617 -0.372172v -1.031135 0.005617 -1.006364v -0.903581 0.342093 -1.006364v -0.651716 0.342093 -1.393169v -0.697421 0.005617 -1.550670v -0.711033 0.872910 -1.081941v -0.697421 0.342093 -1.550670v -1.031135 0.342093 -1.211871v -1.031135 0.342093 -0.372172v -0.363831 0.342093 -1.550670v -1.031135 0.342093 -1.006364v -1.031135 0.342093 -0.594303v -0.634449 0.616744 -1.333667v -0.903581 0.342093 -1.137466v -0.855392 0.616744 -0.372172v -0.363831 0.616744 -1.333667v -0.855392 0.616744 -1.006364v -0.855392 0.616744 -0.594303v -1.470991 0.881971 -2.202225v -1.694314 0.881971 -1.975500v -1.694314 0.656800 -1.975500v -1.470991 0.656800 -2.202225v -1.877457 0.881971 -2.520622v -2.018819 0.881971 -2.377105v -2.101403 0.656800 -2.376480v -1.878081 0.656800 -2.603205v -1.976410 0.839099 -2.615010v -2.114694 0.839099 -2.474620v -2.114694 0.699671 -2.474620v -1.976410 0.699671 -2.615010v -1.582653 0.881971 -2.088863v -1.948138 0.881971 -2.448863v -1.898483 0.881971 -2.258574v -1.757120 0.881971 -2.402091v -1.827801 0.881971 -2.330333v -1.989742 0.881971 -2.489843v -2.101403 0.881971 -2.376480v -1.897858 0.881971 -2.175990v -1.878081 0.881971 -2.603205v -1.674536 0.881971 -2.402715v -1.786197 0.881971 -2.289353v -1.920324 1.087966 -2.421467v -1.963609 1.087966 -2.377522v -1.898900 1.087966 -2.313784v -1.877039 1.087966 -2.465411v -1.812330 1.087966 -2.401674v -1.855615 1.087966 -2.357729v -1.948138 1.034513 -2.448863v -2.018819 1.034513 -2.377105v -1.898483 1.034513 -2.258574v -1.877457 1.034513 -2.520622v -1.757120 1.034513 -2.402091v -1.827801 1.034513 -2.330333v 0.303473 0.005617 0.877100v 0.127730 0.616744 0.774587v 0.175919 0.342093 0.259532v 0.303473 0.005617 0.259532v 0.175919 0.342093 -0.152529v 0.303473 0.005617 -0.152529v 0.303473 0.005617 0.671594v 0.175919 0.342093 0.671594v -0.075947 0.342093 1.058399v -0.030242 0.005617 1.215899v -0.016629 0.872910 0.786182v -0.030242 0.342093 1.215899v 0.303473 0.342093 0.877100v 0.303473 0.342093 -0.152529v 0.303473 0.342093 0.671594v 0.303473 0.342093 0.259532v -0.093214 0.616744 0.998897v 0.175919 0.342093 0.802696v 0.127730 0.616744 -0.152529v 0.127730 0.616744 0.671594v 0.127730 0.616744 0.259532v 0.743329 0.881971 1.867455v 0.966651 0.881971 1.640730v 0.966651 0.656800 1.640730v 0.743329 0.656800 1.867455v 1.149794 0.881971 2.185851v 1.291157 0.881971 2.042335v 1.373741 0.656800 2.041710v 1.150419 0.656800 2.268435v 1.248747 0.839099 2.280240v 1.387031 0.839099 2.139849v 1.387031 0.699671 2.139849v 1.248747 0.699671 2.280240v 0.854990 0.881971 1.754093v 1.220476 0.881971 2.114093v 1.170820 0.881971 1.923804v 1.029458 0.881971 2.067321v 1.100139 0.881971 1.995562v 1.262080 0.881971 2.155072v 1.373741 0.881971 2.041710v 1.170196 0.881971 1.841220v 1.150419 0.881971 2.268435v 0.946874 0.881971 2.067945v 1.058535 0.881971 1.954582v 1.192662 1.087966 2.086696v 1.235947 1.087966 2.042752v 1.171238 1.087966 1.979014v 1.149377 1.087966 2.130641v 1.084668 1.087966 2.066903v 1.127953 1.087966 2.022959v 1.220476 1.034513 2.114093v 1.291157 1.034513 2.042335v 1.170820 1.034513 1.923804v 1.149794 1.034513 2.185851v 1.029458 1.034513 2.067321v 1.100139 1.034513 1.995562v -1.031135 0.005617 0.877100v -0.855392 0.616744 0.774587v -0.363831 0.342093 1.058399v -0.363831 0.005617 1.215899v -0.903581 0.342093 0.259532v -1.031135 0.005617 0.259532v -0.903581 0.342093 -0.152529v -1.031135 0.005617 -0.152529v -1.031135 0.005617 0.671594v -0.903581 0.342093 0.671594v -0.651716 0.342093 1.058399v -0.697421 0.005617 1.215899v -0.711033 0.872910 0.786182v -0.697421 0.342093 1.215899v -1.031135 0.342093 0.877100v -1.031135 0.342093 -0.152529v -0.363831 0.342093 1.215899v -1.031135 0.342093 0.671594v -1.031135 0.342093 0.259532v -0.634449 0.616744 0.998897v -0.903581 0.342093 0.802696v -0.855392 0.616744 -0.152529v -0.363831 0.616744 0.998897v -0.855392 0.616744 0.671594v -0.855392 0.616744 0.259532v -1.470991 0.881971 1.867455v -1.694314 0.881971 1.640730v -1.694314 0.656800 1.640730v -1.470991 0.656800 1.867455v -1.877457 0.881971 2.185851v -2.018819 0.881971 2.042335v -2.101403 0.656800 2.041710v -1.878081 0.656800 2.268435v -1.976410 0.839099 2.280240v -2.114694 0.839099 2.139849v -2.114694 0.699671 2.139849v -1.976410 0.699671 2.280240v -1.582653 0.881971 1.754093v -1.948138 0.881971 2.114093v -1.898483 0.881971 1.923804v -1.757120 0.881971 2.067321v -1.827801 0.881971 1.995562v -1.989742 0.881971 2.155072v -2.101403 0.881971 2.041710v -1.897858 0.881971 1.841220v -1.878081 0.881971 2.268435v -1.674536 0.881971 2.067945v -1.786197 0.881971 1.954582v -1.920324 1.087966 2.086696v -1.963609 1.087966 2.042752v -1.898900 1.087966 1.979014v -1.877039 1.087966 2.130641v -1.812330 1.087966 2.066903v -1.855615 1.087966 2.022959v -1.948138 1.034513 2.114093v -2.018819 1.034513 2.042335v -1.898483 1.034513 1.923804v -1.877457 1.034513 2.185851v -1.757120 1.034513 2.067321v -1.827801 1.034513 1.995562";
var droneNormals = "vn -0.644200 0.000000 -0.764800vn 0.000000 1.000000 0.000000vn 0.699000 0.193100 -0.688500vn 0.000000 -1.000000 0.000000vn 0.386500 -0.840100 -0.380700vn -0.336300 0.881600 0.331200vn 0.755000 0.000000 0.655700vn 0.342000 -0.877200 -0.336900vn -0.701700 -0.000000 -0.712400vn 0.701700 0.000000 0.712400vn 0.712400 0.000000 -0.701700vn 0.342000 0.877200 -0.336900vn -0.119200 0.000000 -0.992900vn 0.991000 0.000000 0.134200vn 0.575300 0.589800 -0.566700vn -0.575300 0.589800 0.566700vn 0.566700 0.589800 0.575300vn -0.566700 0.589800 -0.575300vn -0.712400 0.000000 0.701700vn 0.644200 0.000000 -0.764800vn -1.000000 0.000000 0.000000vn -0.699000 0.193100 -0.688500vn -0.386500 -0.840100 -0.380700vn 0.336300 0.881600 0.331200vn -0.755000 0.000000 0.655700vn -0.342000 -0.877200 -0.336900vn 0.701700 0.000000 -0.712400vn -0.701700 0.000000 0.712400vn -0.712400 0.000000 -0.701700vn -0.342000 0.877200 -0.336900vn 0.119200 0.000000 -0.992900vn -0.991000 0.000000 0.134200vn 0.712400 0.000000 0.701700vn 0.575300 0.589800 0.566700vn -0.575300 0.589800 -0.566700vn -0.566700 0.589800 0.575300vn 0.566700 0.589800 -0.575300vn -0.644200 0.000000 0.764800vn 0.985000 0.172800 0.000000vn 0.699000 0.193100 0.688500vn 0.000000 0.211700 0.977300vn -0.985000 0.172800 0.000000vn 0.386500 -0.840100 0.380700vn -0.336300 0.881600 -0.331200vn 0.755000 0.000000 -0.655700vn 0.342000 -0.877200 0.336900vn 0.342000 0.877200 0.336900vn -0.119200 0.000000 0.992900vn 0.991000 0.000000 -0.134200vn 0.644200 0.000000 0.764800vn 0.000000 0.000000 -1.000000vn -0.699000 0.193100 0.688500vn 0.000000 0.211700 -0.977300vn -0.386500 -0.840100 0.380700vn 0.336300 0.881600 -0.331200vn -0.755000 0.000000 -0.655700vn -0.342000 -0.877200 0.336900vn -0.342000 0.877200 0.336900vn 0.119200 0.000000 0.992900vn -0.991000 0.000000 -0.134200vn 1.000000 0.000000 0.000000vn 0.000000 0.000000 1.000000";
var droneFaces = "f 12//1 22//1 25//1f 9//2 18//2 13//2f 80//2 21//2 20//2f 17//3 2//3 18//3f 160//2 139//2 150//2f 25//4 29//4 28//4f 10//5 25//5 24//5f 13//6 34//6 12//6f 13//7 1//7 24//7f 29//8 33//8 32//8f 43//9 42//9 29//9f 28//10 40//10 41//10f 31//11 32//11 33//11f 39//12 31//12 30//12f 29//13 42//13 30//13f 28//14 32//14 31//14f 27//2 39//2 35//2f 27//10 52//10 53//10f 36//2 41//2 40//2f 26//2 42//2 43//2f 34//2 41//2 44//2f 47//2 45//2 50//2f 37//2 44//2 38//2f 46//15 51//15 45//15f 37//9 55//9 54//9f 50//16 56//16 47//16f 47//17 53//17 52//17f 48//18 54//18 55//18f 38//19 56//19 55//19f 85//20 82//20 70//20f 188//21 72//21 180//21f 67//2 70//2 71//2f 76//22 67//22 77//22f 88//4 89//4 85//4f 84//23 85//23 68//23f 94//24 83//24 71//24f 71//25 83//25 84//25f 92//26 93//26 89//26f 89//27 103//27 85//27f 101//28 88//28 84//28f 93//29 92//29 91//29f 91//30 100//30 99//30f 89//31 93//31 90//31f 91//32 92//32 88//32f 116//33 113//33 98//33f 113//28 112//28 87//28f 114//29 95//29 111//29f 100//2 101//2 96//2f 103//2 102//2 86//2f 26//11 51//11 35//11f 109//2 105//2 110//2f 109//34 110//34 116//34f 111//35 105//35 108//35f 114//27 115//27 97//27f 199//2 217//2 220//2f 112//36 113//36 107//36f 115//37 114//37 108//37f 97//2 98//2 104//2f 141//38 138//38 128//38f 121//39 5//39 135//39f 177//2 179//2 191//2f 125//2 128//2 129//2f 125//2 175//2 189//2f 9//2 73//2 59//2f 133//40 125//40 134//40f 133//41 195//41 175//41f 78//42 81//42 63//42f 144//4 145//4 141//4f 117//43 140//43 141//43f 150//44 139//44 129//44f 129//45 139//45 140//45f 148//46 149//46 145//46f 145//28 159//28 141//28f 157//27 144//27 140//27f 149//33 148//33 147//33f 147//47 156//47 155//47f 145//48 149//48 146//48f 147//49 148//49 144//49f 155//2 151//2 142//2f 169//27 168//27 143//27f 153//2 154//2 160//2f 156//2 157//2 152//2f 159//2 158//2 142//2f 172//29 169//29 154//29f 165//2 161//2 166//2f 172//35 166//35 163//35f 167//34 161//34 164//34f 170//28 171//28 153//28f 202//19 227//19 211//19f 168//37 169//37 163//37f 171//36 170//36 164//36f 170//33 151//33 167//33f 186//50 198//50 201//50f 12//51 60//51 73//51f 4//4 65//4 7//4f 183//2 193//2 187//2f 124//2 132//2 119//2f 192//52 174//52 193//52f 17//53 59//53 79//53f 201//4 205//4 204//4f 173//54 184//54 201//54f 187//55 210//55 186//55f 187//56 173//56 200//56f 205//57 209//57 208//57f 219//10 218//10 205//10f 204//9 216//9 217//9f 207//19 208//19 209//19f 215//58 207//58 206//58f 205//59 218//59 206//59f 204//60 208//60 207//60f 101//2 83//2 94//2f 203//9 228//9 229//9f 213//2 220//2 214//2f 212//2 217//2 216//2f 202//2 218//2 219//2f 214//11 232//11 231//11f 223//2 221//2 226//2f 225//15 232//15 226//15f 222//16 227//16 221//16f 213//10 231//10 230//10f 203//2 215//2 211//2f 223//18 229//18 228//18f 224//17 230//17 231//17f 99//2 95//2 86//2f 122//61 6//61 130//61f 126//62 189//62 176//62f 10//1 12//1 25//1f 12//2 9//2 13//2f 2//2 17//2 20//2f 79//2 76//2 80//2f 81//2 78//2 19//2f 76//2 58//2 80//2f 80//2 81//2 21//2f 194//2 197//2 135//2f 196//2 174//2 192//2f 192//2 195//2 196//2f 133//2 118//2 136//2f 136//2 137//2 196//2f 135//2 19//2 78//2f 20//2 17//2 79//2f 19//2 21//2 81//2f 133//2 136//2 195//2f 196//2 195//2 136//2f 78//2 194//2 135//2f 20//2 79//2 80//2f 137//2 197//2 196//2f 197//2 137//2 135//2f 9//3 17//3 18//3f 150//2 138//2 160//2f 160//2 157//2 139//2f 138//2 159//2 160//2f 24//4 25//4 28//4f 1//5 10//5 24//5f 22//6 12//6 34//6f 13//6 23//6 34//6f 23//7 13//7 24//7f 28//8 29//8 32//8f 29//9 25//9 43//9f 22//9 43//9 25//9f 41//10 23//10 24//10f 24//10 28//10 41//10f 30//11 31//11 33//11f 30//12 42//12 39//12f 39//12 40//12 31//12f 33//13 29//13 30//13f 40//14 28//14 31//14f 26//2 35//2 39//2f 27//2 40//2 39//2f 39//2 42//2 26//2f 36//10 27//10 53//10f 27//2 36//2 40//2f 37//2 26//2 43//2f 43//2 22//2 44//2f 34//2 23//2 41//2f 44//2 22//2 34//2f 49//2 50//2 45//2f 47//2 46//2 45//2f 45//2 48//2 49//2f 36//2 38//2 44//2f 37//2 43//2 44//2f 44//2 41//2 36//2f 48//15 45//15 51//15f 46//15 52//15 51//15f 51//15 54//15 48//15f 26//9 37//9 54//9f 50//16 49//16 56//16f 53//16 47//16 56//16f 55//16 56//16 49//16f 46//17 47//17 52//17f 49//18 48//18 55//18f 55//19 37//19 38//19f 38//19 36//19 53//19f 53//19 56//19 38//19f 68//20 85//20 70//20f 57//21 65//21 74//21f 62//21 64//21 72//21f 180//21 178//21 191//21f 181//21 173//21 187//21f 187//21 190//21 181//21f 191//21 188//21 180//21f 72//21 75//21 62//21f 74//21 71//21 57//21f 65//21 62//21 74//21f 178//21 181//21 191//21f 190//21 191//21 181//21f 75//21 74//21 62//21f 64//21 180//21 72//21f 77//2 67//2 71//2f 58//22 76//22 77//22f 84//4 88//4 85//4f 57//23 84//23 68//23f 71//24 70//24 94//24f 82//24 94//24 70//24f 57//25 71//25 84//25f 88//26 92//26 89//26f 82//27 85//27 103//27f 89//27 102//27 103//27f 84//28 83//28 101//28f 101//28 100//28 88//28f 90//29 93//29 91//29f 99//30 102//30 90//30f 90//30 91//30 99//30f 102//31 89//31 90//31f 100//32 91//32 88//32f 98//33 97//33 115//33f 115//33 116//33 98//33f 113//33 96//33 98//33f 96//28 113//28 87//28f 112//29 111//29 95//29f 114//29 86//29 95//29f 95//29 87//29 112//29f 87//2 100//2 96//2f 97//2 103//2 86//2f 27//11 35//11 51//11f 26//11 54//11 51//11f 51//11 52//11 27//11f 107//2 110//2 105//2f 109//2 108//2 105//2f 105//2 106//2 107//2f 113//34 116//34 107//34f 115//34 109//34 116//34f 110//34 107//34 116//34f 111//35 112//35 106//35f 108//35 114//35 111//35f 106//35 105//35 111//35f 86//27 114//27 97//27f 219//2 198//2 220//2f 210//2 199//2 220//2f 220//2 198//2 210//2f 106//36 112//36 107//36f 109//37 115//37 108//37f 101//2 104//2 96//2f 103//2 97//2 104//2f 98//2 96//2 104//2f 126//38 141//38 128//38f 21//39 19//39 5//39f 2//39 20//39 8//39f 8//39 18//39 2//39f 5//39 3//39 21//39f 119//39 121//39 137//39f 134//39 124//39 118//39f 136//39 118//39 124//39f 19//39 135//39 5//39f 137//39 136//39 124//39f 124//39 119//39 137//39f 3//39 8//39 21//39f 20//39 21//39 8//39f 137//39 121//39 135//39f 71//2 74//2 77//2f 75//2 72//2 63//2f 188//2 191//2 179//2f 190//2 187//2 193//2f 182//2 177//2 190//2f 190//2 193//2 182//2f 72//2 188//2 179//2f 77//2 74//2 66//2f 179//2 63//2 72//2f 66//2 74//2 75//2f 63//2 61//2 75//2f 190//2 177//2 191//2f 66//2 75//2 61//2f 134//2 125//2 129//2f 186//2 189//2 183//2f 128//2 125//2 189//2f 175//2 183//2 189//2f 67//2 59//2 73//2f 9//2 12//2 73//2f 73//2 70//2 67//2f 118//40 133//40 134//40f 183//41 175//41 192//41f 125//41 133//41 175//41f 195//41 192//41 175//41f 66//42 61//42 81//42f 63//42 179//42 194//42f 177//42 182//42 197//42f 193//42 174//42 182//42f 197//42 194//42 179//42f 174//42 196//42 182//42f 179//42 177//42 197//42f 77//42 66//42 58//42f 80//42 58//42 66//42f 194//42 78//42 63//42f 81//42 80//42 66//42f 61//42 63//42 81//42f 196//42 197//42 182//42f 140//4 144//4 141//4f 126//43 117//43 141//43f 129//44 128//44 150//44f 138//44 150//44 128//44f 117//45 129//45 140//45f 144//46 148//46 145//46f 138//28 141//28 159//28f 145//28 158//28 159//28f 140//27 139//27 157//27f 157//27 156//27 144//27f 146//33 149//33 147//33f 155//47 158//47 146//47f 146//47 147//47 155//47f 158//48 145//48 146//48f 156//49 147//49 144//49f 155//2 156//2 143//2f 142//2 158//2 155//2f 143//2 151//2 155//2f 152//27 169//27 143//27f 157//2 160//2 152//2f 159//2 153//2 160//2f 154//2 152//2 160//2f 143//2 156//2 152//2f 153//2 159//2 142//2f 154//29 153//29 171//29f 171//29 172//29 154//29f 169//29 152//29 154//29f 163//2 166//2 161//2f 165//2 164//2 161//2f 161//2 162//2 163//2f 172//35 171//35 165//35f 163//35 169//35 172//35f 172//35 165//35 166//35f 167//34 168//34 162//34f 164//34 170//34 167//34f 162//34 161//34 167//34f 142//28 170//28 153//28f 203//19 211//19 227//19f 202//19 230//19 227//19f 227//19 228//19 203//19f 162//37 168//37 163//37f 165//36 171//36 164//36f 168//33 167//33 151//33f 170//33 142//33 151//33f 151//33 143//33 168//33f 184//50 186//50 201//50f 70//51 73//51 60//51f 12//51 10//51 60//51f 60//51 68//51 70//51f 60//4 10//4 7//4f 1//4 7//4 10//4f 4//4 6//4 64//4f 122//4 120//4 180//4f 123//4 117//4 126//4f 126//4 176//4 123//4f 184//4 173//4 181//4f 181//4 178//4 123//4f 180//4 64//4 6//4f 62//4 65//4 4//4f 57//4 68//4 65//4f 60//4 7//4 65//4f 6//4 122//4 180//4f 123//4 176//4 181//4f 184//4 181//4 176//4f 64//4 62//4 4//4f 68//4 60//4 65//4f 120//4 178//4 180//4f 178//4 120//4 123//4f 186//2 183//2 187//2f 3//2 5//2 14//2f 13//2 18//2 15//2f 8//2 3//2 15//2f 121//2 119//2 132//2f 124//2 134//2 131//2f 129//2 131//2 134//2f 132//2 130//2 121//2f 14//2 16//2 3//2f 15//2 18//2 8//2f 3//2 16//2 15//2f 124//2 131//2 132//2f 130//2 14//2 121//2f 5//2 121//2 14//2f 183//52 192//52 193//52f 76//53 79//53 59//53f 17//53 9//53 59//53f 59//53 67//53 76//53f 200//4 201//4 204//4f 200//54 173//54 201//54f 198//55 186//55 210//55f 187//55 199//55 210//55f 199//56 187//56 200//56f 204//57 205//57 208//57f 205//10 201//10 219//10f 198//10 219//10 201//10f 217//9 199//9 200//9f 200//9 204//9 217//9f 206//19 207//19 209//19f 206//58 218//58 215//58f 215//58 216//58 207//58f 209//59 205//59 206//59f 216//60 204//60 207//60f 94//2 82//2 104//2f 104//2 101//2 94//2f 82//2 103//2 104//2f 212//9 203//9 229//9f 212//2 214//2 220//2f 213//2 219//2 220//2f 220//2 217//2 212//2f 203//2 212//2 216//2f 213//2 202//2 219//2f 231//11 213//11 214//11f 214//11 212//11 229//11f 229//11 232//11 214//11f 225//2 226//2 221//2f 223//2 222//2 221//2f 221//2 224//2 225//2f 223//15 226//15 232//15f 225//15 231//15 232//15f 232//15 229//15 223//15f 224//16 221//16 227//16f 222//16 228//16 227//16f 227//16 230//16 224//16f 202//10 213//10 230//10f 202//2 211//2 215//2f 203//2 216//2 215//2f 215//2 218//2 202//2f 222//18 223//18 228//18f 225//17 224//17 231//17f 99//2 100//2 87//2f 86//2 102//2 99//2f 87//2 95//2 99//2f 13//61 15//61 7//61f 16//61 14//61 6//61f 130//61 132//61 120//61f 131//61 129//61 117//61f 117//61 123//61 131//61f 120//61 122//61 130//61f 6//61 4//61 16//61f 7//61 1//61 13//61f 15//61 16//61 7//61f 132//61 131//61 120//61f 123//61 120//61 131//61f 4//61 7//61 16//61f 14//61 130//61 6//61f 184//62 176//62 189//62f 126//62 128//62 189//62f 189//62 186//62 184//62";
var theDrone = new Model(droneVertices, droneNormals, droneFaces, [150, 255, 180]);
var triList = new TrianglesList();

var propellerVertices = "v -2.500456 0.145432 0.003550v 0.346473 0.001899 0.003550v -3.186090 0.001899 -0.545716v -0.339160 0.145432 -0.545716v 0.346275 0.149925 0.557172v 3.193204 0.006392 0.557172v -0.339358 0.006392 0.007906v 2.507571 0.149925 0.007906";
var propellerNormals = "vn 0.049400 0.979700 0.194400vn -0.049400 0.979700 -0.194400";
var propellerFaces = "f 1//1 2//1 4//1f 5//1 6//1 8//1f 3//2 1//2 4//2f 7//2 5//2 8//2";
var propeller1 = new Model(propellerVertices, propellerNormals, propellerFaces, [200, 170, 200]);
var propeller2 = new Model(propellerVertices, propellerNormals, propellerFaces, [200, 170, 200]);
var propeller3 = new Model(propellerVertices, propellerNormals, propellerFaces, [200, 170, 200]);
var propeller4 = new Model(propellerVertices, propellerNormals, propellerFaces, [200, 170, 200]);

theDrone.applyModelTransform(m4.multiply(m4.multiply(m4.multiply(m4.axisRotation([1, 0, 0], toRad(90)), m4.axisRotation([0, 0, 1], toRad(90))), m4.scaling([30, 30, 30])), m4.translation([5, 10, -15])));

propeller1.applyModelTransform(m4.multiply(m4.multiply(m4.axisRotation([1, 0, 0], toRad(90)), m4.axisRotation([0, 0, 1], toRad(90))), m4.scaling([13, 13, 13])));
propeller2.applyModelTransform(m4.multiply(m4.multiply(m4.axisRotation([1, 0, 0], toRad(90)), m4.axisRotation([0, 0, 1], toRad(90))), m4.scaling([13, 13, 13])));
propeller3.applyModelTransform(m4.multiply(m4.multiply(m4.axisRotation([1, 0, 0], toRad(90)), m4.axisRotation([0, 0, 1], toRad(90))), m4.scaling([13, 13, 13])));
propeller4.applyModelTransform(m4.multiply(m4.multiply(m4.axisRotation([1, 0, 0], toRad(90)), m4.axisRotation([0, 0, 1], toRad(90))), m4.scaling([13, 13, 13])));

triList.addTriangles(crystal1.getTris());
triList.addTriangles(crystal2.getTris());
triList.addTriangles(theDrone.getTris());
triList.addTriangles(propeller1.getTris());
triList.addTriangles(propeller2.getTris());
triList.addTriangles(propeller3.getTris());
triList.addTriangles(propeller4.getTris());
triList.addTriangles(drawTower());
triList.addTriangles(drawGrid());
document.onkeydown = function (e) {
    switch (e.keyCode) {
        /* SPECIAL COMMANDS */
        case 32: // Space bar >> change target (world pos / my drone pos)
            if (isLookingAtDrone) {
                isLookingAtDrone = false;
            }
            else {
                isLookingAtDrone = true;
            }
            break;
        case 49:
            if (showAxes) {
                showAxes = false;
            }
            else {
                showAxes = true;
            }
            break;

        case 67:
            if (isMenuOpen) {
                isMenuOpen = false;
            }
            else {
                isMenuOpen = true;
            }
            break;

        case 13: // Enter >> changes projection type (ortho - pers)
            if (isOrtho === false) {
                isOrtho = true;
            }
            else {
                isOrtho = false;
            }
            break;

            /* CAMERA CONTROLS */
        case 39: // right arrow >> spin camera left
            (!isLookingAtDrone && theta < 360) ? theta += 5 : theta = 0;
            break;

        case 37: // left arrow >> spin camera right
            (!isLookingAtDrone && theta > 0) ? theta -= 5 : theta = 360;
            break;

        case 40: // down arrow >> spin camera up
            if (phi < 175) {
                phi += 5;
            }
            break;

        case 38: // up arrow >> spin camera down
            if (phi > 5) {
                phi -= 5;
            }
            break;

        case 84: // T key >> tilt camera counter clockwise
            if (!event.shiftKey) {
                tilt += 10;
            }
                // Shift + T >> tilt camera clockwise
            else {
                tilt -= 10;
            }
            break;

        case 70: // F key >> +FOV
            if (!event.shiftKey) {
                if (!isOrtho && fov < 50) {
                    fov += toRad(30);
                }
            }
                // Shift + F key >> -FOV
            else {
                if (!isOrtho && fov > 5) {
                    fov -= toRad(30);
                }
            }
            break;

        case 90: // Z key >> zoom in
            if (!event.shiftKey) {
                if (isOrtho && zoom < 5) {
                    zoom += 0.05;
                }
            }
                // Shift + Z >> zoom out
            else {
                if (isOrtho && zoom > 0.5) {
                    zoom -= 0.05;
                }
            }
            break;

            /* PLAYER'S DRONE CONTROLS */
        case 81: // Q key >> move player's drone up
            if (isLookingAtDrone) {
                if (!event.shiftKey) {
                    myDronePos[2] += 10;
                }
                    // Shift + Z key >> move player's drone down
                else {
                    myDronePos[2] -= 10;
                }
            }
            break;

        case 65: // A key >> turn player's drone right
            if (isLookingAtDrone) {
                myDroneRot += 5 * Math.PI / 180;
            }
            break;

        case 68: // D key >> turn player's drone left
            if (isLookingAtDrone) {
                myDroneRot -= 5 * Math.PI / 180;
            }
            break;

        case 87: // W key >> move player's drone
            if (isLookingAtDrone) {
                myDronePos[0] += myDroneSpeed * Math.cos(myDroneRot);
                myDronePos[1] += myDroneSpeed * Math.sin(myDroneRot);
            }
            break;

            /* TARGET POSITION CONTROLS */
        case 66: // B key >> look at x + 10 (orthographic proj only)
            if (!isLookingAtDrone) {
                if (!event.shiftKey) {
                    target[0] += 10;
                }
                    // Shift + B key >> look at x - 10
                else {
                    target[0] -= 10;
                }
            }
            break;

        case 78: // N key >> look at y + 10 (orthographic proj only)
            if (!isLookingAtDrone) {
                if (!event.shiftKey) {
                    target[1] += 10;
                }
                    // Shift + N key >> look at y - 10
                else {
                    target[1] -= 10;
                }
            }
            break;

        case 77: // M key >> look at z + 10
            if (!isLookingAtDrone) {
                if (!event.shiftKey) {
                    target[2] += 10;
                }
                    // Shift + M key >> look at z - 10
                else {
                    target[2] -= 10;
                }
            }
            break;
    }
};
function animate() {
    "use strict";
    canvas.width = window.innerWidth - 22;
    canvas.height = window.innerHeight - 22;

    

    var Mcam; // setup camera matrix
    if (isLookingAtDrone) { // drone mode matrix
        Mcam = m4.inverse(m4.lookAt(eye, myDronePos, up));
        eye = [myDronePos[0] - camStaticPos[0] * Math.cos(myDroneRot) * Math.sin(toRad(phi)), myDronePos[1] - camStaticPos[1] * Math.sin(myDroneRot) * Math.sin(toRad(phi)), myDronePos[2] + camStaticPos[2] * Math.cos(toRad(phi))];
    }
    else { // position mode matrix
        Mcam = m4.inverse(m4.lookAt(eye, target, up));
        eye = [target[0] + camStaticPos[0] * Math.cos(toRad(theta)) * Math.sin(toRad(phi)), target[1] + camStaticPos[1] * Math.sin(toRad(theta)) * Math.sin(toRad(phi)), target[2] + camStaticPos[2] * Math.cos(toRad(phi))];
    }

    var Mproj; // setup projection matrix
    if (isOrtho) { // orthographic projection mode
        Mproj = m4.ortho(l / zoom, r / zoom, t / zoom, b / zoom, n, f);
    }
    else { // perspective projection mode
        Mproj = m4.perspective(toRad(fov), 1, 20, 1000);
    }

    // setup viewport matrix
    var Mvp = m4.multiply(m4.scaling([200, -200, 200]), m4.translation([(canvas.width - 1) / 2, (canvas.height - 1) / 2, 0]));

    // setup overall transformation matrix
    Mcp = m4.multiply(Mcam, Mproj);
    Mmcpv[0] = m4.multiply(Mcp, Mvp);


    // clear previous frame
    canvas.width = canvas.width;

    // manages camera tilt
    if (isLookingAtDrone) { // tilt in drone mode
        translate3D(myDronePos[0], myDronePos[1], myDronePos[2]);
        var a = v3.subtract(myDronePos, eye);
        rotate3D(a[0], a[1], a[2], toRad(tilt));
        translate3D(-myDronePos[0], -myDronePos[1], -myDronePos[2]);
    }
    else { // tilt in position mode
        translate3D(target[0], target[1], target[2]);
        var a = v3.subtract(target, eye);
        rotate3D(a[0], a[1], a[2], toRad(tilt));
        translate3D(-target[0], -target[1], -target[2]);
    }

    // draw world
    draw();

    window.requestAnimationFrame(animate);

    function draw() {
        save3D();
        var ray = v3.normalize([target[0] - eye[0],
            target[1] - eye[1],
            target[2] - eye[2]
        ]);

        theDrone.saveModelTransform();
        propeller1.saveModelTransform();
        propeller2.saveModelTransform();
        propeller3.saveModelTransform();
        propeller4.saveModelTransform();

        // build drone model transform
        theDrone.applyModelTransform(m4.axisRotation([0, 0, 1], myDroneRot));
        theDrone.applyModelTransform(m4.translation([myDronePos[0], myDronePos[1], myDronePos[2]]));

        // build propeller1 model transform
        propeller1.applyModelTransform(m4.axisRotation([0, 0, 1], -toRad(propelRot)));
        propeller1.applyModelTransform(m4.translation([65, 45, 18]));
        propeller1.applyModelTransform(m4.axisRotation([0, 0, 1], myDroneRot));
        propeller1.applyModelTransform(m4.translation([myDronePos[0], myDronePos[1], myDronePos[2]]));

        // build propeller2 model transform
        propeller2.applyModelTransform(m4.axisRotation([0, 0, 1], toRad(propelRot)));
        propeller2.applyModelTransform(m4.translation([-65, 45, 18]));
        propeller2.applyModelTransform(m4.axisRotation([0, 0, 1], myDroneRot));
        propeller2.applyModelTransform(m4.translation([myDronePos[0], myDronePos[1], myDronePos[2]]));

        // build propeller3 model transform
        propeller3.applyModelTransform(m4.axisRotation([0, 0, 1], -toRad(propelRot)));
        propeller3.applyModelTransform(m4.translation([-65, -45, 18]));
        propeller3.applyModelTransform(m4.axisRotation([0, 0, 1], myDroneRot));
        propeller3.applyModelTransform(m4.translation([myDronePos[0], myDronePos[1], myDronePos[2]]));

        // build propeller4 model transform
        propeller4.applyModelTransform(m4.axisRotation([0, 0, 1], toRad(propelRot)));
        propeller4.applyModelTransform(m4.translation([65, -45, 18]));
        propeller4.applyModelTransform(m4.axisRotation([0, 0, 1], myDroneRot));
        propeller4.applyModelTransform(m4.translation([myDronePos[0], myDronePos[1], myDronePos[2]]));

        // draw everything (painter's algorithm)
        triList.draw(ctx, Mmcpv, ray);

        propeller1.restoreModelTransform();
        propeller2.restoreModelTransform();
        propeller3.restoreModelTransform();
        propeller4.restoreModelTransform();
        theDrone.restoreModelTransform();

        restore3D();

        // display aim icon when in position mode
        if (!isLookingAtDrone) {
            ctx.strokeStyle = "red";
            ctx.beginPath();
            arc3D(target[0], target[1], target[2], 2, 0, 2 * Math.PI);
            ctx.stroke();
        }


        // manages display axes
        if (showAxes) {
            drawAxes("green");
        }



        propelRot += 50;

        // manages display menu
        drawMenu();

    }

    function drawMenu() {

        save3D();
        ctx.strokeStyle = "white";
        ctx.fillStyle = "blue";
        ctx.lineWidth = 5;
        ctx.font = "bold 14px Comic Sans MS";
        if (!isMenuOpen) {
            ctx.strokeText("CONTROLS MENU (CLICK 'C' TO OPEN)", 5, 20);
            ctx.fillText("CONTROLS MENU (CLICK 'C' TO OPEN)", 5, 20);
        }
        else {
            ctx.strokeText("CONTROLS MENU (CLICK 'C' TO CLOSE)", 5, 20);
            ctx.fillText("CONTROLS MENU (CLICK 'C' TO CLOSE)", 5, 20);
            ctx.strokeText("SPACE : CHANGE TARGET TO DRONE/POSITION MODE", 25, 45);
            ctx.fillText("SPACE : CHANGE TARGET TO DRONE/POSITION MODE", 25, 45);
            ctx.strokeText("ENTER : CHANGE PROJECTION TYPE (ORTHOGRAPHIC/PERSPECTIVE)", 25, 70);
            ctx.fillText("ENTER : CHANGE PROJECTION TYPE (ORTHOGRAPHIC/PERSPECTIVE)", 25, 70);
            ctx.strokeText("1 : SHOW COORDINATE SYSTEM REPRESENTATION", 25, 95);
            ctx.fillText("1 : SHOW COORDINATE SYSTEM REPRESENTATION", 25, 95);
            ctx.strokeText("B/N/M (SHIFT+) : CHANGE X/Y/Z VALUES (POSITION MODE)", 25, 120);
            ctx.fillText("B/N/M (SHIFT+) : CHANGE X/Y/Z VALUES (POSITION MODE)", 25, 120);
            ctx.strokeText("W : MOVE YOUR DRONE (DRONE MODE)", 25, 145);
            ctx.fillText("W : MOVE YOUR DRONE (DRONE MODE)", 25, 145);
            ctx.strokeText("A/D : TURN YOUR DRONE LEFT/RIGHT (DRONE MODE)", 25, 170);
            ctx.fillText("A/D : TURN YOUR DRONE LEFT/RIGHT (DRONE MODE)", 25, 170);
            ctx.strokeText("Q/SHIFT+Q : MOVE YOUR DRONE UP/DOWN (DRONE MODE)", 25, 195);
            ctx.fillText("Q/SHIFT+Q : MOVE YOUR DRONE UP/DOWN (DRONE MODE)", 25, 195);
            ctx.strokeText("ARROWS : MOVE CAMERA (LEFT/RIGHT ONLY IN POSITION MODE)", 25, 220);
            ctx.fillText("ARROWS : MOVE CAMERA (LEFT/RIGHT ONLY IN POSITION MODE)", 25, 220);
            ctx.strokeText("T/SHIFT+T : TILT CAMERA", 25, 245);
            ctx.fillText("T/SHIFT+T : TILT CAMERA", 25, 245);
            ctx.strokeText("Z/SHIFT+Z : ZOOM (ORTHOGRAPHIC PROJECTION MODE)", 25, 270);
            ctx.fillText("Z/SHIFT+Z : ZOOM (ORTHOGRAPHIC PROJECTION MODE)", 25, 270);
            ctx.strokeText("F/SHIFT+F : FIELD OF VIEW (PERSPECTIVE PROJECTION MODE)", 25, 295);
            ctx.fillText("F/SHIFT+F : FIELD OF VIEW (PERSPECTIVE PROJECTION MODE)", 25, 295);
        }
        restore3D();
    }

    

    function drawAxes(rgb) {
        ctx.strokeStyle = (rgb);
        ctx.beginPath();
        // Axes
        moveTo3D(120, 0, 0); lineTo3D(0, 0, 0); lineTo3D(0, 120, 0);
        moveTo3D(0, 0, 0); lineTo3D(0, 0, 120);
        // Arrowheads
        moveTo3D(110, 5, 0); lineTo3D(120, 0, 0); lineTo3D(110, 0, 5);
        moveTo3D(110, -5, 0); lineTo3D(120, 0, 0); lineTo3D(110, 0, -5);
        moveTo3D(5, 110, 0); lineTo3D(0, 120, 0); lineTo3D(0, 110, 5);
        moveTo3D(-5, 110, 0); lineTo3D(0, 120, 0); lineTo3D(0, 110, -5);
        moveTo3D(5, 0, 110); lineTo3D(0, 0, 120); lineTo3D(0, 5, 110);
        moveTo3D(-5, 0, 110); lineTo3D(0, 0, 120); lineTo3D(0, -5, 110);
        // X-label
        moveTo3D(130, -5, 0); lineTo3D(140, 5, 0);
        moveTo3D(130, 5, 0); lineTo3D(140, -5, 0);
        // Y-label
        moveTo3D(-5, 130, 0); lineTo3D(0, 135, 0); lineTo3D(5, 130, 0);
        moveTo3D(0, 135, 0); lineTo3D(0, 142, 0);
        // Z-label
        moveTo3D(5, -5, 140); lineTo3D(-5, 5, 140); lineTo3D(5, -5, 130);
        lineTo3D(-5, 5, 130);
        ctx.stroke();
    }

}

function drawGrid() {
    var gridTris = [];
    for (var i = -1000; i <= 1000; i += 100) {

        for (var j = -1000; j <= 1000; j += 100) {
            gridTris.push(new Triangle([i, j, 0], [i + 100, j, 0], [i + 100, j + 100, 0], null, [255, 255, 255], -1, null, Mmcpv));
            gridTris.push(new Triangle([i, j, 0], [i + 100, j + 100, 0], [i, j + 100, 0], null, [235, 235, 235], -1, null, Mmcpv));
        }
    }
    return gridTris;
}

function drawTower() {

    var towerTris = [];
    towerTris.push(new Triangle([50, 50, 0], [50, -50, 0], [50, -50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([50, 50, 0], [50, -50, 150], [50, 50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([50, -50, 0], [-50, -50, 0], [-50, -50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([50, -50, 0], [-50, -50, 150], [50, -50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-50, -50, 0], [-50, 50, 0], [-50, 50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-50, -50, 0], [-50, 50, 150], [-50, -50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-50, 50, 0], [50, 50, 0], [50, 50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-50, 50, 0], [50, 50, 150], [-50, 50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([50, 50, 150], [50, -50, 150], [-50, -50, 150], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([50, 50, 150], [-50, -50, 150], [-50, 50, 150], null, [169, 226, 243], -1, null, Mmcpv));

    towerTris.push(new Triangle([30, 30, 150], [30, -30, 150], [30, -30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([30, 30, 150], [30, -30, 300], [30, 30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([30, -30, 150], [-30, -30, 150], [-30, -30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([30, -30, 150], [-30, -30, 300], [30, -30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-30, -30, 150], [-30, 30, 150], [-30, 30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-30, -30, 150], [-30, 30, 300], [-30, -30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-30, 30, 150], [30, 30, 150], [30, 30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-30, 30, 150], [30, 30, 300], [-30, 30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([30, 30, 300], [30, -30, 300], [-30, -30, 300], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([30, 30, 300], [-30, -30, 300], [-30, 30, 300], null, [169, 226, 243], -1, null, Mmcpv));

    towerTris.push(new Triangle([15, 15, 300], [15, -15, 300], [15, -15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([15, 15, 300], [15, -15, 450], [15, 15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([15, -15, 300], [-15, -15, 300], [-15, -15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([15, -15, 300], [-15, -15, 450], [15, -15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-15, -15, 300], [-15, 15, 300], [-15, 15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-15, -15, 300], [-15, 15, 450], [-15, -15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-15, 15, 300], [15, 15, 300], [15, 15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([-15, 15, 300], [15, 15, 450], [-15, 15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([15, 15, 450], [15, -15, 450], [-15, -15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    towerTris.push(new Triangle([15, 15, 450], [-15, -15, 450], [-15, 15, 450], null, [169, 226, 243], -1, null, Mmcpv));
    return towerTris;

}

function moveTo3D(x, y, z) {
    var pos3D = m4.transformPoint(Mmcpv[Mmcpv.length - 1], [x, y, z]);
    ctx.moveTo(pos3D[0], pos3D[1]);
}

function lineTo3D(x, y, z) {
    var pos3D = m4.transformPoint(Mmcpv[Mmcpv.length - 1], [x, y, z]);
    ctx.lineTo(pos3D[0], pos3D[1]);
}

function arc3D(x, y, z, radius, startAngle, endAngle) {   
    var angle_UpEye = v3.dot([0,0,1], v3.normalize(eye));
    var pos3D = m4.transformPoint(Mmcpv[Mmcpv.length - 1], [x, y, z]);
    ctx.ellipse(pos3D[0], pos3D[1], radius, radius * Math.abs(angle_UpEye), 0, startAngle, endAngle);
}

function rotate3D(x, y, z, rad) {
    Mmcpv[Mmcpv.length - 1] = m4.multiply(m4.axisRotation([x, y, z], rad), Mmcpv[Mmcpv.length - 1]);
}

function translate3D(x, y, z) {
    Mmcpv[Mmcpv.length - 1] = m4.multiply(m4.translation([x, y, z]), Mmcpv[Mmcpv.length - 1]);
}

function scale3D(x, y, z) {
    Mmcpv[Mmcpv.length - 1] = m4.multiply(m4.scaling([x, y, z]), Mmcpv[Mmcpv.length - 1]);
}

function save3D() {
    Mmcpv.push(Mmcpv[Mmcpv.length - 1]);
}

function restore3D() {
    Mmcpv.pop();
}

function toRad(angle) {
    return angle * Math.PI / 180;
}

window.onload = animate;
